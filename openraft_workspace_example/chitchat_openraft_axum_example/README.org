* Chitchat OpenRaft Axum Example
:PROPERTIES:
:CUSTOM_ID: chitchat-openraft-axum-example
:END:
A distributed key-value store example using
[[https://github.com/quickwit-oss/chitchat][Chitchat]] for gossip
protocol communication, built with Axum web framework.

** Overview
:PROPERTIES:
:CUSTOM_ID: overview
:END:
This project demonstrates how to build a distributed system using: -
*Chitchat*: A gossip protocol implementation for distributed node
communication - *Axum*: Modern async web framework for Rust -
*OpenRaft*: Distributed consensus protocol (configured but not fully
integrated in this example)

** Migration from Poem to Axum
:PROPERTIES:
:CUSTOM_ID: migration-from-poem-to-axum
:END:
This project was originally built with the Poem web framework and has
been migrated to Axum. Key changes include:

*** Dependencies
:PROPERTIES:
:CUSTOM_ID: dependencies
:END:
- Replaced =poem= and =poem-openapi= with =axum=
- Added =aide= for future OpenAPI documentation support
- Added =schemars= for JSON schema generation

*** Code Changes
:PROPERTIES:
:CUSTOM_ID: code-changes
:END:
- Converted from Poem's =#[OpenApi]= impl blocks to individual Axum
  handler functions
- Changed from =poem_openapi::param::Query= to =axum::extract::Query=
- Replaced =poem_openapi::payload::Json= with =axum::response::Json=
- Migrated from Poem's route structure to Axum's =Router::new()= pattern

** API Endpoints
:PROPERTIES:
:CUSTOM_ID: api-endpoints
:END:
*** GET /
:PROPERTIES:
:CUSTOM_ID: get
:END:
Returns the current cluster state including: - Cluster ID - Complete
cluster state snapshot - List of live nodes - List of dead nodes

*Example Response:*

#+begin_src json
{
  "cluster_id": "testing",
  "cluster_state": { ... },
  "live_nodes": [
    {
      "node_id": "server:127.0.0.1:10001-abc123",
      "generation": 1673612345,
      "gossip_advertise_addr": "127.0.0.1:10001"
    }
  ],
  "dead_nodes": []
}
#+end_src

*** GET /set_kv?key=&value=
:PROPERTIES:
:CUSTOM_ID: get-set_kvkeyvalue
:END:
Sets a key-value pair on the current node.

*Parameters:* - =key=: The key to set - =value=: The value to associate
with the key

*Example:*

#+begin_src sh
curl "http://127.0.0.1:10001/set_kv?key=hello&value=world"
#+end_src

*Response:*

#+begin_src json
{
  "status": true
}
#+end_src

*** GET /mark_for_deletion?key=
:PROPERTIES:
:CUSTOM_ID: get-mark_for_deletionkey
:END:
Marks a key for deletion on the current node.

*Parameters:* - =key=: The key to mark for deletion

*Example:*

#+begin_src sh
curl "http://127.0.0.1:10001/mark_for_deletion?key=hello"
#+end_src

*Response:*

#+begin_src json
{
  "status": true
}
#+end_src

** Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:
*** Quick Start with run-servers.sh Script
:PROPERTIES:
:CUSTOM_ID: quick-start-with-run-servers-script
:END:
The easiest way to start a multi-node cluster is using the provided script:

#+begin_src sh
./run-servers.sh
#+end_src

This script will:
- Kill any existing instances
- Start 5 nodes on ports 10001-10005
- Use node 10001 as the seed node for cluster formation
- Provide helpful test commands
- Wait for you to press Enter before stopping all nodes

*Note:* Make sure the script is executable with =chmod +x run-servers.sh=

*** Starting a Single Node
:PROPERTIES:
:CUSTOM_ID: starting-a-single-node
:END:
#+begin_src sh
cargo run -- --listen_addr 127.0.0.1:10001
#+end_src

*** Starting Multiple Nodes Manually
:PROPERTIES:
:CUSTOM_ID: starting-multiple-nodes-manually
:END:
Start the first node:

#+begin_src sh
cargo run -- --listen_addr 127.0.0.1:10001
#+end_src

Start additional nodes with seed configuration:

#+begin_src sh
cargo run -- --listen_addr 127.0.0.1:10002 --seed 127.0.0.1:10001
cargo run -- --listen_addr 127.0.0.1:10003 --seed 127.0.0.1:10001
#+end_src

*** Command Line Options
:PROPERTIES:
:CUSTOM_ID: command-line-options
:END:
#+begin_example
USAGE:
    chitchat_openraft_axum_example [OPTIONS]

FLAGS:
    -h, --help       Prints help information
    -V, --version    Prints version information

OPTIONS:
        --listen_addr <listen_addr>        Socket address to listen on [default: 127.0.0.1:10000]
        --public_addr <public_addr>        Public address other nodes should use to reach this node
        --node_id <node_id>               Unique node identifier (auto-generated if not provided)
        --seed <seed>...                  Seed node addresses for cluster discovery
        --interval_ms <interval>          Gossip interval in milliseconds [default: 500]
#+end_example

** Testing the API
:PROPERTIES:
:CUSTOM_ID: testing-the-api
:END:
*** Quick Testing with Multiple Nodes
:PROPERTIES:
:CUSTOM_ID: quick-testing-with-multiple-nodes
:END:
After starting the cluster with =./run-servers.sh=:

#+begin_src sh
# Check cluster state from node 1
curl http://127.0.0.1:10001/ | jq

# Set a key-value pair on node 1
curl "http://127.0.0.1:10001/set_kv?key=test&value=hello"

# Verify the data propagated to node 2 via gossip
curl http://127.0.0.1:10002/ | jq '.cluster_state'

# Check all live nodes from node 3
curl http://127.0.0.1:10003/ | jq '.live_nodes'
#+end_src

*** Individual API Tests
:PROPERTIES:
:CUSTOM_ID: individual-api-tests
:END:
**** Check Cluster State
:PROPERTIES:
:CUSTOM_ID: check-cluster-state
:END:
#+begin_src sh
curl http://127.0.0.1:10001/ | jq
#+end_src

**** Set a Key-Value Pair
:PROPERTIES:
:CUSTOM_ID: set-a-key-value-pair
:END:
#+begin_src sh
curl "http://127.0.0.1:10001/set_kv?key=test&value=data"
#+end_src

**** Verify the Key Was Set
:PROPERTIES:
:CUSTOM_ID: verify-the-key-was-set
:END:
#+begin_src sh
curl http://127.0.0.1:10001/ | jq '.cluster_state'
#+end_src

**** Mark Key for Deletion
:PROPERTIES:
:CUSTOM_ID: mark-key-for-deletion
:END:
#+begin_src sh
curl "http://127.0.0.1:10001/mark_for_deletion?key=test"
#+end_src

*** Testing Cluster Behavior
:PROPERTIES:
:CUSTOM_ID: testing-cluster-behavior
:END:
**** Test Gossip Propagation
:PROPERTIES:
:CUSTOM_ID: test-gossip-propagation
:END:
#+begin_src sh
# Set data on node 1
curl "http://127.0.0.1:10001/set_kv?key=node1_data&value=from_node_1"

# Wait a moment for gossip propagation (usually very fast)
sleep 1

# Check if data appears on other nodes
curl http://127.0.0.1:10002/ | jq '.cluster_state.node1_data'
curl http://127.0.0.1:10003/ | jq '.cluster_state.node1_data'
#+end_src

**** Test Node Discovery
:PROPERTIES:
:CUSTOM_ID: test-node-discovery
:END:
#+begin_src sh
# Check how many nodes are discovered in the cluster
curl http://127.0.0.1:10001/ | jq '.live_nodes | length'

# List all node IDs in the cluster
curl http://127.0.0.1:10001/ | jq '.live_nodes[].node_id'
#+end_src

** Project Structure
:PROPERTIES:
:CUSTOM_ID: project-structure
:END:
#+begin_example
chitchat_openraft_axum_example/
├── Cargo.toml                 # Project dependencies and metadata
├── README.md                  # Markdown documentation
├── README.org                 # Org-mode documentation (this file)
├── run-servers.sh             # Script to start multi-node cluster
└── src/
    ├── lib.rs                 # Shared data structures and types
    └── main.rs                # Main application with API endpoints
#+end_example

** Files Description
:PROPERTIES:
:CUSTOM_ID: files-description
:END:
*** =src/main.rs=
:PROPERTIES:
:CUSTOM_ID: src-main-rs
:END:
Contains the main application logic:
- Axum web server setup and routing
- API endpoint handlers (get_state, set_kv, mark_for_deletion)
- Chitchat configuration and initialization
- Command-line argument parsing with StructOpt

*** =src/lib.rs=
:PROPERTIES:
:CUSTOM_ID: src-lib-rs
:END:
Defines shared data structures:
- =ApiResponse=: Response format for cluster state endpoint
- =SetKeyValueResponse=: Response format for key-value operations
- Serde serialization/deserialization traits

*** =run-servers.sh=
:PROPERTIES:
:CUSTOM_ID: run-servers-sh
:END:
Bash script for development and testing:
- Automatically starts 5-node cluster
- Handles process cleanup
- Provides helpful testing commands
- Interactive stop mechanism

** Architecture
:PROPERTIES:
:CUSTOM_ID: architecture
:END:
*** Chitchat Integration
:PROPERTIES:
:CUSTOM_ID: chitchat-integration
:END:
- Each node runs a Chitchat instance for gossip communication
- Nodes automatically discover each other using seed nodes
- Key-value operations are local to each node and propagated via gossip
- Failed nodes are detected and marked as dead

*** State Management
:PROPERTIES:
:CUSTOM_ID: state-management
:END:
- Application state is managed through =AppState= containing a shared
  Chitchat instance
- Mutex-protected access ensures thread safety
- Tokio async runtime handles concurrent requests

*** Configuration
:PROPERTIES:
:CUSTOM_ID: configuration
:END:
- Configurable gossip intervals
- Adjustable failure detection timeouts
- Support for custom node IDs and addressing

** Troubleshooting
:PROPERTIES:
:CUSTOM_ID: troubleshooting
:END:
*** Port Already in Use
:PROPERTIES:
:CUSTOM_ID: port-already-in-use
:END:
If you get "Address already in use" error:

#+begin_src sh
# Kill existing processes
killall chitchat_openraft_axum_example

# Or use different ports
cargo run -- --listen_addr 127.0.0.1:11001
#+end_src

*** Node Not Joining Cluster
:PROPERTIES:
:CUSTOM_ID: node-not-joining-cluster
:END:
- Ensure seed node is running before starting other nodes
- Check that UDP ports are not blocked by firewall
- Verify seed addresses are correct (include port number)

*** API Returns "Invalid request"
:PROPERTIES:
:CUSTOM_ID: api-returns-invalid-request
:END:
- Make sure you're using the correct port (10001-10005 with run-servers.sh)
- Check that the HTTP method is GET for all endpoints
- Verify query parameters are properly URL-encoded

*** Logs and Debugging
:PROPERTIES:
:CUSTOM_ID: logs-and-debugging
:END:
Enable detailed logging by setting environment variables:

#+begin_src sh
RUST_LOG=debug cargo run -- --listen_addr 127.0.0.1:10001
#+end_src

** Future Enhancements
:PROPERTIES:
:CUSTOM_ID: future-enhancements
:END:
1. *OpenAPI Documentation*: Full integration with aide for automatic API
   documentation
2. *OpenRaft Integration*: Complete distributed consensus implementation
3. *Persistence*: Add data persistence layer
4. *Metrics*: Add prometheus metrics for monitoring
5. *Authentication*: Add API authentication and authorization
6. *WebSocket Support*: Real-time cluster state updates

** Dependencies
:PROPERTIES:
:CUSTOM_ID: dependencies-1
:END:
- =axum=: Web framework
- =chitchat=: Gossip protocol implementation
- =openraft=: Distributed consensus (configured for future use)
- =tokio=: Async runtime
- =serde=: Serialization framework
- =structopt=: Command-line argument parsing
- =tracing-subscriber=: Structured logging

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
This is an example project for educational purposes.
