* Axum SSR React Example with V8 TypeScript Integration
:PROPERTIES:
:CUSTOM_ID: axum-ssr-react-example-with-v8-typescript-integration
:END:
A full-stack web application example combining Ru  "processing_time_ms": 30
}
#+end_src

*** Stream Chat Authentication Response
:PROPERTIES:
:CUSTOM_ID: stream-chat-authentication-response
:END:
#+begin_src json
{
  "success": true,
  "token": "StreamChat_token_for_john_exp1733150400_iat1733064000",
  "api_key": "demo_api_key_12345",
  "server_client_config": {
    "api_key": "demo_api_key_12345",
    "api_secret": "demo_api...",
    "initialized": true
  },
  "user": {
    "id": "john",
    "name": "John Doe",
    "email": "john@example.com",
    "image": "https://avatar.example.com/john.jpg",
    "role": "admin",
    "custom": {
      "department": "Engineering",
      "location": "San Francisco"
    }
  },
  "token_metadata": {
    "issued_at": 1733064000,
    "expires_at": 1733150400,
    "user_id": "john",
    "has_iat_claim": true
  },
  "issued_at": "2025-08-01T12:00:00Z",
  "expires_at": "2025-08-02T12:00:00Z",
  "processing_time_ms": 15
}
#+end_src(Axum) backend with
React frontend, featuring V8 JavaScript engine integration for
TypeScript code execution.

** Features
:PROPERTIES:
:CUSTOM_ID: features
:END:
- *Axum Web Framework*: Modern async web framework for Rust
- *Server-Side Rendering*: Using =ssr_rs= for React SSR
- *V8 Integration*: Execute TypeScript code using V8 JavaScript engine
- *TypeScript Processing*: HTTP request analysis and data generation
- *Global State Management*: Using =once_cell= for thread-safe global
  storage
- *JSONPlaceholder API Demo*: Complete API simulation with realistic
  data
- *Stream Chat Integration*: Real-time chat authentication and user
  management using Stream.io API patterns

** Architecture
:PROPERTIES:
:CUSTOM_ID: architecture
:END:
#+begin_example
src/
├── main.rs              # Axum server setup and routes
├── v8_processor.rs      # V8 TypeScript processor with once_cell
client/
├── src/
│   ├── v8-processing.ts         # HTTP request analysis logic
│   ├── data-generators.ts       # Data generation functions
│   ├── jsonplaceholder-demo.ts  # JSONPlaceholder API simulation
│   └── stream-chat-demo.ts      # Stream Chat integration demo
└── dist/v8/
    ├── v8-processing.js         # Compiled JavaScript
    ├── data-generators.js       # Compiled JavaScript
    ├── jsonplaceholder-demo.js  # Compiled JavaScript
    └── stream-chat-demo.js      # Compiled JavaScript
#+end_example

** V8 TypeScript Integration
:PROPERTIES:
:CUSTOM_ID: v8-typescript-integration
:END:
*** Key Components
:PROPERTIES:
:CUSTOM_ID: key-components
:END:
1. *V8TypeScriptProcessor*: Main processor that executes TypeScript
   logic
2. *Global Storage*: Uses =once_cell::sync::Lazy= for thread-safe code
   storage
3. *HTTP Request Analysis*: Processes incoming requests with risk
   scoring
4. *Data Generation*: Creates user profiles, analytics, and sample data
5. *JSONPlaceholder API*: Complete API simulation with posts, users,
   todos, etc.
6. *Stream Chat Integration*: User authentication and chat management
   following Stream.io patterns

*** TypeScript Functions
:PROPERTIES:
:CUSTOM_ID: typescript-functions
:END:
**** HTTP Request Processing (=v8-processing.ts=)
:PROPERTIES:
:CUSTOM_ID: http-request-processing-v8-processing.ts
:END:
- Analyzes request paths, user agents, and hosts
- Calculates risk scores based on patterns
- Provides caching recommendations
- Handles redirects and blocking

**** Data Generation (=data-generators.ts=)
:PROPERTIES:
:CUSTOM_ID: data-generation-data-generators.ts
:END:
- Generates user profiles with realistic data
- Creates analytics dashboards
- Provides sample data for testing

**** JSONPlaceholder API (=jsonplaceholder-demo.ts=)
:PROPERTIES:
:CUSTOM_ID: jsonplaceholder-api-jsonplaceholder-demo.ts
:END:
- Simulates complete RESTful API endpoints
- Supports posts, users, comments, albums, photos, todos
- Provides error handling and metadata
- Includes analytics and data aggregation

**** Stream Chat API (=stream-chat-demo.ts=)
:PROPERTIES:
:CUSTOM_ID: stream-chat-api-stream-chat-demo.ts
:END:
- Implements Stream.io authentication patterns
- User token generation with proper JWT structure
- Channel management and user context
- Real-time chat analytics and statistics

** API Endpoints
:PROPERTIES:
:CUSTOM_ID: api-endpoints
:END:
- =/= - Home page with navigation
- =/v8/typescript= - V8 TypeScript processing demonstration
- =/v8/jsonplaceholder= - V8 JSONPlaceholder API simulation demo
- =/stream-chat= - Stream Chat authentication and user management
- =/calc= - Calculator demo
- =/fetch= - Fetch API demonstration
- =/data= - Data processing demo
- =/weather= - Weather dashboard
- =/profile= - User profile demo

** Dependencies
:PROPERTIES:
:CUSTOM_ID: dependencies
:END:
*** Rust Dependencies (Cargo.toml)
:PROPERTIES:
:CUSTOM_ID: rust-dependencies
:END:
#+begin_src toml
[dependencies]
axum = "0.8.4"
chrono = { version = "0.4", features = ["serde"] }
dotenvy = "0.15"
once_cell = "1.20.2"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
ssr_rs = "0.8.3"
tokio = { version = "1.47.1", features = ["full"] }
tower = "0.5"
tower-http = { version = "0.6", features = ["fs"] }
#+end_src

*** JavaScript Dependencies (client/package.json)
:PROPERTIES:
:CUSTOM_ID: javascript-dependencies
:END:
#+begin_src json
{
  "dependencies": {
    "fast-text-encoding": "^1.0.6",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "stream-chat": "^9.14.0"
  },
  "devDependencies": {
    "@types/react": "^19.1.9",
    "@types/react-dom": "^19.1.7",
    "typescript": "^5.9.2",
    "vite": "^5.4.8"
  }
}
#+end_src

** Environment Setup
:PROPERTIES:
:CUSTOM_ID: environment-setup
:END:
*** 1. Create Environment File
:PROPERTIES:
:CUSTOM_ID: environment-file
:END:
Create a =.env= file in the project root with your Stream Chat credentials:

#+begin_src bash
# Stream Chat API Configuration
STREAM_API_KEY=your_stream_api_key_here
STREAM_API_SECRET=your_stream_api_secret_here

# Optional: Server configuration
PORT=8080
RUST_LOG=info
#+end_src

*** 2. Install Prerequisites
:PROPERTIES:
:CUSTOM_ID: install-prerequisites
:END:
**** Install Rust
:PROPERTIES:
:CUSTOM_ID: install-rust
:END:
#+begin_src bash
# Install Rust via rustup
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source ~/.cargo/env

# Verify installation
rustc --version
cargo --version
#+end_src

**** Install Bun (for TypeScript compilation)
:PROPERTIES:
:CUSTOM_ID: install-bun
:END:
#+begin_src bash
# Install Bun
curl -fsSL https://bun.sh/install | bash
source ~/.bashrc  # or restart terminal

# Verify installation
bun --version
#+end_src

** Build Instructions
:PROPERTIES:
:CUSTOM_ID: build-instructions
:END:
*** TypeScript Compilation Scripts
:PROPERTIES:
:CUSTOM_ID: typescript-compilation-scripts
:END:
The project includes these build scripts in =client/package.json=:

#+begin_src json
{
  "scripts": {
    "build:v8": "bun build src/v8-processing.ts src/data-generators.ts src/jsonplaceholder-demo.ts --outdir dist/v8 --target browser --format esm",
    "build:v8-stream-chat": "bun build src/stream-chat-v8-demo.ts --outdir dist/v8 --target browser --format iife --outfile stream-chat-demo.js",
    "build:ssr": "vite build --config vite.ssr.config.ts",
    "build": "tsc -b && vite build"
  }
}
#+end_src

**** Key Build Scripts Explained
:PROPERTIES:
:CUSTOM_ID: build-scripts-explained
:END:
- =build:v8= - Compiles general V8 utilities (ESM format)
- =build:v8-stream-chat= - Compiles Stream Chat implementation for V8 (IIFE format)
- =build:ssr= - Builds server-side rendering bundle
- =build= - Standard TypeScript/React build

*** Complete Build Process
:PROPERTIES:
:CUSTOM_ID: complete-build-process
:END:
**** 1. Quick Build (Development)
:PROPERTIES:
:CUSTOM_ID: quick-build-development
:END:
#+begin_src bash
# Navigate to project root
cd axum_ssr_react_example

# Install JavaScript dependencies
cd client && bun install && cd ..

# Compile TypeScript for V8
cd client
bun run build:v8
bun run build:v8-stream-chat
cd ..

# Build and run Rust application
cargo run
#+end_src

**** 2. Production Build
:PROPERTIES:
:CUSTOM_ID: production-build
:END:
#+begin_src bash
# Navigate to project root
cd axum_ssr_react_example

# Install JavaScript dependencies
cd client && bun install && cd ..

# Compile all TypeScript files
cd client
bun run build           # React/SSR build
bun run build:v8        # V8 utilities
bun run build:v8-stream-chat  # Stream Chat V8
cd ..

# Build Rust application with optimizations
cargo build --release

# Run production binary
./target/release/axum_ssr_react_example
#+end_src

**** 3. Automated Build Script
:PROPERTIES:
:CUSTOM_ID: automated-build-script
:END:
Create a =build.sh= script for complete automation:

#+begin_src bash
#!/bin/bash
# build.sh - Complete build automation

set -e  # Exit on error

echo "🔨 Building Axum SSR React Example with Stream Chat..."

# Check if .env file exists
if [[ ! -f .env ]]; then
    echo "⚠️  Warning: .env file not found. Creating template..."
    cat > .env << 'EOF'
STREAM_API_KEY=your_stream_api_key_here
STREAM_API_SECRET=your_stream_api_secret_here
PORT=8080
RUST_LOG=info
EOF
    echo "📝 Please edit .env with your actual Stream Chat credentials"
fi

# Install JavaScript dependencies
echo "📦 Installing JavaScript dependencies..."
cd client
bun install

# Compile TypeScript files
echo "🔄 Compiling TypeScript files..."
echo "  - Building V8 utilities..."
bun run build:v8

echo "  - Building Stream Chat V8 implementation..."
bun run build:v8-stream-chat

echo "  - Building SSR bundle..."
bun run build:ssr

echo "  - Building React application..."
bun run build

# Return to project root
cd ..

# Build Rust application
echo "🦀 Building Rust application..."
if [[ "$1" == "--release" ]]; then
    echo "  - Building with release optimizations..."
    cargo build --release
    BINARY_PATH="target/release/axum_ssr_react_example"
else
    echo "  - Building in development mode..."
    cargo build
    BINARY_PATH="target/debug/axum_ssr_react_example"
fi

echo "✅ Build complete!"
echo "📍 Binary location: $BINARY_PATH"
echo "🚀 Run with: ./$BINARY_PATH"
echo ""
echo "📖 Available endpoints:"
echo "  - Home: http://localhost:8080/"
echo "  - Stream Chat: http://localhost:8080/stream-chat"
echo "  - V8 TypeScript: http://localhost:8080/v8/typescript"
echo "  - JSONPlaceholder: http://localhost:8080/v8/jsonplaceholder"
#+end_src

Make the script executable and run:

#+begin_src bash
chmod +x build.sh

# Development build
./build.sh

# Production build
./build.sh --release
#+end_src

*** Manual TypeScript Compilation
:PROPERTIES:
:CUSTOM_ID: manual-typescript-compilation
:END:
If you need to compile TypeScript manually without package.json scripts:

#+begin_src bash
cd client

# Install dependencies
bun install

# Compile individual files
bun build src/v8-processing.ts --outdir dist/v8 --target browser --format esm
bun build src/data-generators.ts --outdir dist/v8 --target browser --format esm  
bun build src/jsonplaceholder-demo.ts --outdir dist/v8 --target browser --format esm

# Compile Stream Chat with specific settings for V8
bun build src/stream-chat-v8-demo.ts \
  --outdir dist/v8 \
  --target browser \
  --format iife \
  --outfile stream-chat-demo.js

# Verify compiled files
ls -la dist/v8/
#+end_src

*** Rust Build Options
:PROPERTIES:
:CUSTOM_ID: rust-build-options
:END:
**** Development Build
:PROPERTIES:
:CUSTOM_ID: rust-development-build
:END:
#+begin_src bash
# Fast compilation, includes debug symbols
cargo build

# Run directly
cargo run

# With environment variables
RUST_LOG=debug cargo run

# With custom port
PORT=3000 cargo run
#+end_src

**** Release Build
:PROPERTIES:
:CUSTOM_ID: rust-release-build
:END:
#+begin_src bash
# Optimized compilation (slower build, faster runtime)
cargo build --release

# Run release binary
./target/release/axum_ssr_react_example

# Check binary size
ls -lh target/release/axum_ssr_react_example
#+end_src

**** Build with Specific Features
:PROPERTIES:
:CUSTOM_ID: rust-build-features
:END:
#+begin_src bash
# Check available features in Cargo.toml
cargo build --features "feature_name"

# Build without default features
cargo build --no-default-features

# Clean build
cargo clean && cargo build --release
#+end_src

** Running the Application
:PROPERTIES:
:CUSTOM_ID: running-the-application
:END:
*** Quick Start
:PROPERTIES:
:CUSTOM_ID: quick-start
:END:
After following the build instructions above:

#+begin_src bash
# Development mode (after building)
cargo run

# Production mode (after release build)
./target/release/axum_ssr_react_example

# With custom configuration
PORT=3000 RUST_LOG=debug cargo run
#+end_src

*** Application Endpoints
:PROPERTIES:
:CUSTOM_ID: application-endpoints
:END:
Once running, visit these URLs:

**** Core Demos
:PROPERTIES:
:CUSTOM_ID: core-demos
:END:
- *Home*: http://localhost:8080/
- *V8 TypeScript Demo*: http://localhost:8080/v8/typescript
- *JSONPlaceholder API*: http://localhost:8080/v8/jsonplaceholder
- *Stream Chat Integration*: http://localhost:8080/stream-chat

**** Stream Chat Specific Endpoints
:PROPERTIES:
:CUSTOM_ID: stream-chat-endpoints
:END:
- *Setup & Config*: http://localhost:8080/stream-chat?demo=setup
- *User Authentication*: http://localhost:8080/stream-chat?demo=authenticate&data=john
- *User Context*: http://localhost:8080/stream-chat?demo=user-context&data=john
- *Analytics*: http://localhost:8080/stream-chat?demo=analytics

**** Additional Features
:PROPERTIES:
:CUSTOM_ID: additional-features
:END:
- *Calculator*: http://localhost:8080/calc
- *Data Processing*: http://localhost:8080/data
- *Weather Dashboard*: http://localhost:8080/weather
- *User Profile*: http://localhost:8080/profile

** Build Troubleshooting
:PROPERTIES:
:CUSTOM_ID: build-troubleshooting
:END:
*** Common TypeScript Build Issues
:PROPERTIES:
:CUSTOM_ID: typescript-build-issues
:END:
**** Missing V8 Functions Error
:PROPERTIES:
:CUSTOM_ID: missing-v8-functions
:END:
#+begin_example
⚠️ Bundle missing required functions, using fallback
❌ processStreamChatRequestSync: ❌
❌ renderStreamChatHTML: ❌
#+end_example

*Solution:*
#+begin_src bash
cd client
# Ensure you're compiling the correct file
bun run build:v8-stream-chat
# Verify output contains required functions
grep -E "processStreamChatRequestSync|renderStreamChatHTML" dist/v8/stream-chat-demo.js
#+end_src

**** TypeScript Compilation Errors
:PROPERTIES:
:CUSTOM_ID: typescript-compilation-errors
:END:
#+begin_example
error: Cannot find module 'stream-chat'
#+end_example

*Solution:*
#+begin_src bash
cd client
# Reinstall dependencies
rm -rf node_modules bun.lockb
bun install
# Try building again
bun run build:v8-stream-chat
#+end_src

*** Common Rust Build Issues
:PROPERTIES:
:CUSTOM_ID: rust-build-issues
:END:
**** Environment Variables Not Loaded
:PROPERTIES:
:CUSTOM_ID: env-vars-not-loaded
:END:
#+begin_example
Error: Environment variable STREAM_API_KEY not found
#+end_example

*Solution:*
#+begin_src bash
# Ensure .env file exists in project root
ls -la .env

# Check file contents
cat .env

# Restart server after changes
cargo run
#+end_src

**** V8 Bundle Not Found
:PROPERTIES:
:CUSTOM_ID: v8-bundle-not-found
:END:
#+begin_example
⚠️ Could not load bundle from: client/dist/v8/stream-chat-demo.js
#+end_example

*Solution:*
#+begin_src bash
# Check if file exists
ls -la client/dist/v8/stream-chat-demo.js

# If missing, build it
cd client
bun run build:v8-stream-chat
cd ..

# Restart Rust server
cargo run
#+end_src

**** Permission Issues
:PROPERTIES:
:CUSTOM_ID: permission-issues
:END:
#+begin_example
Permission denied (os error 13)
#+end_example

*Solution:*
#+begin_src bash
# Fix file permissions
chmod +r client/dist/v8/stream-chat-demo.js

# Or rebuild with correct permissions
cd client
bun run build:v8-stream-chat
cd ..
#+end_src

*** Development Workflow Issues
:PROPERTIES:
:CUSTOM_ID: development-workflow-issues
:END:
**** Changes Not Reflected
:PROPERTIES:
:CUSTOM_ID: changes-not-reflected
:END:
When TypeScript changes don't appear:

#+begin_src bash
# 1. Recompile TypeScript
cd client
bun run build:v8-stream-chat

# 2. Restart Rust server (Ctrl+C then)
cd ..
cargo run

# 3. Clear browser cache if needed
# Use Ctrl+Shift+R (hard refresh)
#+end_src

**** Port Already in Use
:PROPERTIES:
:CUSTOM_ID: port-already-in-use
:END:
#+begin_example
Error: Address already in use (os error 48)
#+end_example

*Solution:*
#+begin_src bash
# Use different port
PORT=3001 cargo run

# Or kill existing process
lsof -ti:8080 | xargs kill -9
cargo run
#+end_src

*** Build Script Debugging
:PROPERTIES:
:CUSTOM_ID: build-script-debugging
:END:
**** Verbose Build Output
:PROPERTIES:
:CUSTOM_ID: verbose-build-output
:END:
#+begin_src bash
# Rust verbose build
cargo build --verbose

# TypeScript with detailed output
cd client
bun build src/stream-chat-v8-demo.ts \
  --outdir dist/v8 \
  --target browser \
  --format iife \
  --outfile stream-chat-demo.js \
  --verbose
#+end_src

**** Clean Rebuild
:PROPERTIES:
:CUSTOM_ID: clean-rebuild
:END:
#+begin_src bash
# Clean Rust build
cargo clean

# Clean TypeScript build
cd client
rm -rf dist/v8/*

# Rebuild everything
bun run build:v8-stream-chat
cd ..
cargo build
#+end_src

** V8 Processing Examples
:PROPERTIES:
:CUSTOM_ID: v8-processing-examples
:END:
*** JSONPlaceholder API Response
:PROPERTIES:
:CUSTOM_ID: jsonplaceholder-api-response
:END:
#+begin_src json
{
  "success": true,
  "data": {
    "userId": 1,
    "id": 1,
    "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
    "body": "quia et suscipit\nsuscipit recusandae consequuntur..."
  },
  "metadata": {
    "endpoint": "posts/1",
    "returned_count": 1,
    "total_available": 100,
    "api_source": "jsonplaceholder.typicode.com (simulated)",
    "cached": false
  },
  "timestamp": "2025-08-01T12:00:00Z",
  "processing_time_ms": 12
}
#+end_src

*** HTTP Request Analysis
:PROPERTIES:
:CUSTOM_ID: http-request-analysis
:END:
#+begin_src json
{
  "status": "processed",
  "timestamp": "2025-08-01T12:00:00Z",
  "request": {
    "path": "/api/users",
    "host": "api.example.com",
    "user_agent": "curl/7.64.1"
  },
  "analysis": {
    "path_info": {
      "is_api": true,
      "is_static_asset": false,
      "segments": ["api", "users"]
    },
    "user_agent_info": {
      "browser": "bot",
      "is_bot": true
    },
    "risk_score": 30
  },
  "response": {
    "message": "Successfully processed /api/users",
    "should_cache": false,
    "redirect_url": null
  }
}
#+end_src

** Technical Implementation
:PROPERTIES:
:CUSTOM_ID: technical-implementation
:END:
*** Once Cell Global Storage
:PROPERTIES:
:CUSTOM_ID: once-cell-global-storage
:END:
The application uses =once_cell::sync::Lazy= to store compiled
TypeScript code globally:

#+begin_src rust
static V8_CODE: Lazy<Mutex<Option<V8TypeScriptCode>>> = 
  Lazy::new(|| Mutex::new(V8TypeScriptCode::new()));
#+end_src

This provides: - *Thread Safety*: Multiple requests can access the same
code safely - *Lazy Initialization*: Code is loaded only when first
accessed - *Efficient Access*: No recompilation needed for subsequent
requests

*** V8 Integration Strategy
:PROPERTIES:
:CUSTOM_ID: v8-integration-strategy
:END:
Since =ssr_rs= manages the V8 runtime, the processor simulates
TypeScript logic in Rust rather than creating new V8 isolates. This
approach: - Avoids conflicts with the existing V8 runtime - Maintains
the same logic as the TypeScript code - Provides consistent results
across requests

*** JSONPlaceholder Features
:PROPERTIES:
:CUSTOM_ID: jsonplaceholder-features
:END:
- *Complete API Coverage*: Posts, users, comments, albums, photos, todos
- *Error Handling*: Proper 404 responses for missing resources
- *Metadata Support*: Processing times, caching info, API attribution
- *Data Relationships*: User-post aggregation and cross-referencing
- *Analytics Engine*: Statistical analysis of all data types
- *TypeScript Types*: Full interface definitions for type safety

*** Stream Chat Features
:PROPERTIES:
:CUSTOM_ID: stream-chat-features
:END:
- *Official API Pattern*: Follows Stream.io documentation exactly
- *Token Generation*: Proper JWT tokens with expiration and iat claims
- *User Management*: Complete user profiles with roles and metadata
- *Channel Support*: Multi-channel chat with different types
- *Analytics Dashboard*: Real-time chat statistics and metrics
- *Security Features*: Proper authentication and token validation

** Stream Chat Integration Guide
:PROPERTIES:
:CUSTOM_ID: stream-chat-integration-guide
:END:

*** Overview
:PROPERTIES:
:CUSTOM_ID: stream-chat-overview
:END:
The Stream Chat demo implements the official Stream.io authentication
and user management patterns as documented at
https://getstream.io/chat/docs/react/tokens_and_authentication/

*** Available Endpoints
:PROPERTIES:
:CUSTOM_ID: stream-chat-endpoints
:END:
**** Main Demo Page
:PROPERTIES:
:CUSTOM_ID: stream-chat-main-demo
:END:
#+begin_example
GET /stream-chat
#+end_example

Shows the Stream Chat demo with setup information and navigation to all
available features.

**** Authentication Demo
:PROPERTIES:
:CUSTOM_ID: stream-chat-authentication
:END:
#+begin_example
GET /stream-chat?demo=authenticate&data=john
GET /stream-chat?demo=authenticate&data=jane  
GET /stream-chat?demo=authenticate&data=bob
#+end_example

Demonstrates token generation following the Stream.io pattern:
#+begin_src javascript
const serverClient = StreamChat.getInstance(api_key, api_secret);
const token = serverClient.createToken(user_id);
#+end_src

**** User Context Demo
:PROPERTIES:
:CUSTOM_ID: stream-chat-user-context
:END:
#+begin_example
GET /stream-chat?demo=user-context&data=john
GET /stream-chat?demo=user-context&data=jane
#+end_example

Shows user's chat channels, recent messages, and context information.

**** Analytics Demo
:PROPERTIES:
:CUSTOM_ID: stream-chat-analytics
:END:
#+begin_example
GET /stream-chat?demo=analytics
#+end_example

Displays comprehensive chat analytics including user statistics, channel
metrics, and engagement data.

**** Setup & Configuration
:PROPERTIES:
:CUSTOM_ID: stream-chat-setup-config
:END:
#+begin_example
GET /stream-chat?demo=setup
#+end_example

Shows API configuration, sample users, channels, and integration
examples.

*** Implementation Pattern
:PROPERTIES:
:CUSTOM_ID: stream-chat-implementation-pattern
:END:
**** Server-Side Token Generation
:PROPERTIES:
:CUSTOM_ID: server-side-token-generation
:END:
Following Stream.io's official documentation:

#+begin_src javascript
// Initialize Server Client
const api_key = "your_api_key";
const api_secret = "your_api_secret";
const serverClient = StreamChat.getInstance(api_key, api_secret);

// Create user token
const user_id = "john";
const token = serverClient.createToken(user_id);

// With expiration (recommended)
const expireTime = Math.floor(Date.now() / 1000) + 60 * 60; // 1 hour
const tokenWithExp = serverClient.createToken(user_id, expireTime);

// With issued at time (security best practice)
const issuedAt = Math.floor(Date.now() / 1000);
const secureToken = serverClient.createToken(user_id, expireTime, issuedAt);
#+end_src

**** Client-Side Connection
:PROPERTIES:
:CUSTOM_ID: client-side-connection
:END:
#+begin_src javascript
// Connect user with token from server
await client.connectUser({
  id: "john",
  name: "John Doe",
  image: "https://avatar.example.com/john.jpg"
}, tokenFromServer);

// Using token provider for automatic refresh
await client.connectUser(userObject, async () => {
  const response = await fetch('/api/chat-token', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ user_id: "john" })
  });
  const data = await response.json();
  return data.token;
});
#+end_src

*** Sample Users & Channels
:PROPERTIES:
:CUSTOM_ID: sample-users-channels
:END:
**** Demo Users
:PROPERTIES:
:CUSTOM_ID: demo-users
:END:
- *john* (Admin) - Engineering Department, San Francisco
- *jane* (Moderator) - Design Department, New York  
- *bob* (User) - Marketing Department, Los Angeles
- *alice* (User) - Sales Department, Austin

**** Demo Channels
:PROPERTIES:
:CUSTOM_ID: demo-channels
:END:
- *general* (messaging) - General Discussion for all users
- *engineering* (team) - Engineering team private channel
- *random* (messaging) - Random chat for casual conversations

*** Response Examples
:PROPERTIES:
:CUSTOM_ID: stream-chat-response-examples
:END:
**** Token Generation Response
:PROPERTIES:
:CUSTOM_ID: token-generation-response
:END:
#+begin_src json
{
  "success": true,
  "token": "StreamChat_token_for_john_exp1733150400_iat1733064000",
  "api_key": "demo_api_key_12345",
  "server_client_config": {
    "api_key": "demo_api_key_12345",
    "api_secret": "demo_api...",
    "initialized": true
  },
  "user": {
    "id": "john",
    "name": "John Doe",
    "email": "john@example.com",
    "role": "admin"
  },
  "token_metadata": {
    "issued_at": 1733064000,
    "expires_at": 1733150400,
    "user_id": "john",
    "has_iat_claim": true
  }
}
#+end_src

**** User Context Response
:PROPERTIES:
:CUSTOM_ID: user-context-response
:END:
#+begin_src json
{
  "success": true,
  "data": {
    "user": {
      "id": "john",
      "name": "John Doe",
      "role": "admin"
    },
    "channels": [
      {
        "id": "general",
        "type": "messaging",
        "name": "General Discussion",
        "members": ["john", "jane", "bob", "alice"],
        "unread_count": 2,
        "last_message_at": "2025-08-01T11:30:00Z"
      }
    ],
    "stats": {
      "total_channels": 2,
      "unread_messages": 2,
      "online_status": "online"
    }
  }
}
#+end_src

*** Integration Best Practices
:PROPERTIES:
:CUSTOM_ID: integration-best-practices
:END:
1. *Security*: Always include =iat= (issued at) claims in tokens
2. *Expiration*: Set reasonable token expiration times (1-24 hours)
3. *Token Provider*: Use async token providers for automatic refresh
4. *Error Handling*: Implement proper error handling for authentication failures
5. *User Management*: Sync user data between your system and Stream Chat
6. *Rate Limiting*: Be aware of Stream.io API rate limits
7. *Monitoring*: Track authentication success/failure rates

** Development Notes
:PROPERTIES:
:CUSTOM_ID: development-notes
:END:
- TypeScript files are compiled to JavaScript in =client/dist/v8/=
- The processor simulates TypeScript logic for compatibility with
  =ssr_rs=
- Global storage ensures efficient access to compiled code
- Error handling provides graceful fallbacks when TypeScript files are
  missing
- JSONPlaceholder demo provides a realistic API simulation experience
- Stream Chat demo follows official Stream.io documentation patterns
- Authentication tokens include proper JWT structure with iat/exp claims

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
This project is for educational and demonstration purposes.
